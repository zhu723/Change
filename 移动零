# 移动零

+ 难度：简单
+ 标签：`数组`、`双指针`
+ 链接：力扣 https://leetcode-cn.com/problems/move-zeroes/

## 题目


给定一个数组 `nums`，编写一个函数将所有 `0` 移动到数组的末尾，同时保持非零元素的相对顺序。

**示例:**

```
输入: [0,1,0,3,12]
输出: [1,3,12,0,0]
```

**说明**:

1. 必须在原数组上操作，不能拷贝额外的数组。
2. 尽量减少操作次数。

## 解答记录

双指针，`i` 检测当前 `nums[i]` 元素，`j` 重赋值 `nums` 数组。遇到 `nums[i]` 为零，不赋值`nums[j]`。最后必定有 `j≤i` ，`j~i` 这部分赋0。

```c
void moveZeroes(int* nums, int numsSize){
    int i,j;
    for(i = 0, j = 0; i < numsSize; i++) {
        if(nums[i]){
            nums[j++] = nums[i];
        }
    }
    memset(&nums[j],0,sizeof(int)*(numsSize - j));
}
```

返回信息：

+ 用时 20 ms，击败 41.54% 的 C 提交；
+ 内存消耗 7.4 MB，击败 41.71% 的 C 提交；

---
